import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
// import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
// import java.util.Map;
import java.util.Set;

import edu.princeton.cs.algs4.In;
import edu.princeton.cs.algs4.StdDraw;
import edu.princeton.cs.algs4.StdOut;

/**
 * 
 */

/**
 * @author David Price
 *
 */
public class FastCollinearPoints {
    private Point[] pts;
    private Point[] sortedPts;
    private LineSegment[] ls;
    private int n;
    
    
    // finds all line segments containing 4 or more points
    public FastCollinearPoints(Point[] points) {
     // check if Points array is null - if so throw NullPointerException
        if (points == null) {
            throw new NullPointerException("Points array is null");
        }
        // check if any element in Points array is null - if so throw NullPointerException
        for (Point pt : points) {
            if (pt == null) {
                throw new NullPointerException("At least one point is null");
            }
        }
        // check if any point is repeated - if so throw IllegalArgumentException
        if (containsDuplicates(points)) {
            throw new IllegalArgumentException("Points array contains at least one repeated point");
        }
        
        n = points.length;
        pts = new Point[n];
        System.arraycopy(points, 0, pts, 0, points.length);
        
        sortedPts = new Point[n];
        System.arraycopy(pts, 0, sortedPts, 0, sortedPts.length);
        // Sort the array according to Point compareTo()
        // Arrays.sort(pts);
        
    }
    
    // the number of line segments
    public int numberOfSegments() {
        return ls.length;
    }
    
    // the line segments
    public LineSegment[] segments() {
        List<LineSegment> lst = new ArrayList<LineSegment>();
        
        outerloop:
        for (int i = 0; i < n; i++) {
            
            Point p = pts[i];
            
            // Sort pts according to slope order with respect to point p
            Arrays.sort(pts, p.slopeOrder());
            // Make new list for colinear points
            List<Point> colinearPts = new ArrayList<Point>();
            innerloop:
            for (int j = 0; j < n - 1; j++) {
                Point q = pts[j];
                Point r = pts[j + 1];
                if (p != q && p != r) {
                    if (colinearPts.isEmpty()) { 
                        colinearPts.add(q);
                    }
                    if (p.slopeTo(q) == p.slopeTo(r)) {
                        colinearPts.add(r);
                    }
                    if (colinearPts.size() >= 3) {
                        colinearPts.add(p);
                        break innerloop;
                    }
                    
                }
                
            }
            Point [] coPts = colinearPts.toArray(new Point[colinearPts.size()]);
            Arrays.sort(coPts);
            Point a = coPts[0];
            Point b = coPts[coPts.length - 1];
            LineSegment lineS = new LineSegment(a, b);
            lst.add(lineS);
            
            // colinearPts.clear();
        }
           
        ls = lst.toArray(new LineSegment[lst.size()]);
        return Arrays.copyOf(ls, ls.length);
    }
    
    // Private method to check for duplicate points using a Set
    private boolean containsDuplicates(Point[] x) {
        
        for (int j = 0; j < x.length; j++) {
            for (int k = 0; k < x.length; k++) {
                if (k != j && x[j].equals(x[k])) {
                    return true;
                }
            }
        }      
        return false;
    }
    
    public static void main(String[] args) {

        // read the n points from a file
        In in = new In(args[0]);
        int n = in.readInt();
        Point[] points = new Point[n];
        for (int i = 0; i < n; i++) {
            int x = in.readInt();
            int y = in.readInt();
            points[i] = new Point(x, y);
        }

        // draw the points
        StdDraw.enableDoubleBuffering();
        StdDraw.setXscale(0, 32768);
        StdDraw.setYscale(0, 32768);
        for (Point p : points) {
            p.draw();
        }
        StdDraw.show();

        // print and draw the line segments
        FastCollinearPoints collinear = new FastCollinearPoints(points);
        for (LineSegment segment : collinear.segments()) {
            StdOut.println(segment);
            segment.draw();
        }
        StdDraw.show();
    }
    
}
