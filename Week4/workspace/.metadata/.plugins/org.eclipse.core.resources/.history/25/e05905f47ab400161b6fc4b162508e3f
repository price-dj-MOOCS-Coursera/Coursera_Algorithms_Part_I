import java.util.Arrays;

/**
 * 
 */

/**
 * @author David Price
 *
 */

public class Board {
    private final int n;
    private int[][] tiles;
    
    // construct a board from an n-by-n array of blocks
    // (where blocks[i][j] = block in row i, column j)
    public Board(int[][] blocks) {
        
        // test blocks != null
        if (blocks == null) { throw new NullPointerException("null blocks"); }
        
        n = blocks[0].length;
        tiles = copy2DArray(blocks);
        
        
    
    }

    // board dimension n
    public int dimension() {
        return n;
    }

    // number of blocks out of place
    public int hamming() {
        int ham = 0;
        
    }

    // sum of Manhattan distances between blocks and goal
    public int manhattan() {
        
    }

    // is this board the goal board?
    public boolean isGoal() {
        
    }
    
    // a board that is obtained by exchanging any pair of blocks
    public Board twin() {
        
    }
    
    // does this board equal y?
    public boolean equals(Object y) {
        
    }

    // all neighboring boards
    public Iterable<Board> neighbors() {
        
    }
    
    // Converts 2D array to 1D array
    private int[] convertTo1DArray(int[][] arr) {
        int[] newArr = new int[arr.length*arr.length];
        
        for (int i = 0; i < arr.length; i++) {
            for (int j = 0; j < arr.length; j++) {
                newArr[(i * arr.length) + j] = arr[i][j];
            }
        }
        return newArr;
    }
    
    
    private int[][] copy2DArray(int[][] arr) {
        int[][] myInt = new int[arr.length][];
        for(int i = 0; i < arr.length; i++)
        {
          myInt[i] = new int[arr[i].length];
          for (int j = 0; j < arr[i].length; j++)
          {
            myInt[i][j] = arr[i][j];
          }
        }
        return myInt;
    }
    
    // Converts 2D array coords to 1D array indices
    private int xyTo1D(int x, int y) {
            return x * n + y;
    }
    

    // string representation of this board (in the output format specified below)
    public String toString() {
        StringBuilder s = new StringBuilder();
        s.append(n + "\n");
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                s.append(String.format("%2d ", tiles[i][j]));
            }
            s.append("\n");
        }
        return s.toString();
    }
    
    // unit tests (not graded)
    public static void main(String[] args) {
        
    }
}