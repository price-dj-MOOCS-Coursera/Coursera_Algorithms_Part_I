/*
 * 
 * 
 * 
 */

import edu.princeton.cs.algs4.StdRandom;
import edu.princeton.cs.algs4.StdStats;

public class PercolationStats {
	private int numTrials;
	private double[] results;
	
	
	
	/*
	 * perform trials independent experiments on an n-by-n grid
	 * 
	 */
	
	public PercolationStats(int n, int trials) throws IllegalArgumentException {
		if (n <= 0 || trials <= 0) {
			throw new IllegalArgumentException("Invalid n or trials");
		}
		numTrials = trials;
		results = new double[numTrials];
		
		// Set up the Percolation trials
		for (int i=0; i < numTrials; i++) {
			Percolation perc = new Percolation(n);
			while (!perc.percolates()) {
				int k = StdRandom.uniform(1, n+1);
				int l = StdRandom.uniform(1, n+1);
				perc.open(k, l);
			}
			double threshold = (double)perc.numOpenSites/(n*n);
			results[i] = threshold;
		}
		
	}
	
	// sample mean of percolation threshold
	public double mean() {
		return StdStats.mean(results);
	}
	
	// sample standard deviation of percolation threshold
	public double stddev() {
		return StdStats.stddev(results);
	}
	
	// low  endpoint of 95% confidence interval
	public double confidenceLo() {
		return mean() - (1.96*stddev()/Math.sqrt((double)numTrials));
	}
	
	// high endpoint of 95% confidence interval
	public double confidenceHi() {
		return mean() + (1.96*stddev()/Math.sqrt((double)numTrials));
	}

       

	public static void main(String[] args) {	// test client (described below)
		// TODO Auto-generated method stub

	}

}
